/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 15.10.2024 13:59:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 42048;
#else
constexpr int kTensorArenaSize = 41024;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003890931373462081, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 520, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data3[6] = { -114, 139, 449, -1433, 1191, 890, };
const TfArray<1, int> tensor_dimension3 = { 1, { 6 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00037505515501834452, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[6*520] = { 
  11, 47, -52, -8, -54, 5, -46, -9, 3, -5, -29, 0, -83, 12, -1, 41, -37, 1, 7, -5, 4, -15, 20, 18, 20, -39, -9, 7, 11, -20, -12, -50, -22, -32, 25, -54, 13, 8, -37, -38, 17, 45, -43, -3, 28, -22, -24, 8, 19, 2, -33, -10, -17, 14, -10, 34, -30, 8, 15, -3, -3, -16, 15, -3, 9, -34, 6, 4, 11, -13, -8, -66, -7, -29, 41, 26, 24, -19, 30, -44, 8, 36, -44, 2, 19, -21, -24, -11, 22, -9, -54, -9, -13, 17, -4, 38, -28, 1, 14, -17, 28, -15, 39, 13, 4, -37, 11, 2, 15, 15, -3, -74, -2, -24, 24, 36, 32, -8, 49, -14, -18, 34, -50, -5, 10, -11, -39, -13, 14, 2, -49, -10, -1, 5, -5, 23, -15, -2, 6, 2, 47, -36, 47, 13, 4, -34, 12, 8, 24, 16, 11, -63, -17, -20, 23, 31, 36, -45, 51, -21, -15, 45, -29, 8, -1, 10, -41, -20, -9, 18, -55, -11, -54, 27, -5, 18, -20, 13, 5, 4, 14, -12, 36, 17, -13, -25, 8, 6, 1, 17, -8, -50, -11, -18, 19, 25, 31, -11, 54, -40, -13, 37, -48, -6, 11, -3, -41, -15, -13, -17, -39, 4, -42, 17, 0, 36, -13, 2, -4, -3, 4, -12, 27, 50, -1, -22, 8, 3, 22, -34, -7, -16, -12, -23, 14, 4, 21, 15, 35, -60, 1, 55, -44, -5, -45, -11, -30, -1, -3, -41, -27, -6, -33, 0, 15, 40, 12, 0, 19, -11, 13, -15, 14, 81, 13, -30, -7, 29, 24, -28, 10, -10, -5, -36, 28, 20, 23, 15, 43, -55, 10, 41, -49, 2, 4, -22, -18, 3, -24, -38, -31, -3, -36, 26, 1, 26, 5, -14, 22, 6, 4, -14, 23, 74, 3, -22, 1, 11, 13, -52, 8, -25, -13, -36, 41, 18, 34, 31, 38, -61, 13, 32, -46, 2, -1, -12, -21, -11, -19, 10, -54, -7, 4, 22, 6, 33, -25, 7, 9, -12, 10, 21, 34, 31, 6, 2, -2, -2, 8, -24, 20, -50, -8, -34, 29, 12, 46, 34, 34, -32, -19, 42, -49, -8, 10, -13, -38, -5, 6, -15, -49, -5, -57, 14, -13, 33, -18, 23, 23, 13, 6, 19, 28, 17, 22, -12, -2, 18, 15, -5, -9, -64, -3, -49, 25, 15, 32, 12, 37, -58, -13, 39, -57, 3, 11, -24, -29, -8, -5, -11, -57, 8, -26, 42, -8, 13, -17, 19, 22, -5, 6, 0, 35, 5, 15, 9, 7, 4, 18, -4, 5, -64, -7, -62, 26, 20, 30, 52, 73, -54, -1, 44, -47, 4, -22, 3, -43, -11, -10, 19, -25, 1, -82, 9, 10, 27, 0, 3, 1, 11, 8, 11, 38, 41, 19, 24, 7, 30, 35, -16, -11, -62, -22, -64, 15, 19, 44, 31, 71, -45, -3, 61, -66, 3, 27, 0, -29, -8, -48, -22, -53, -12, -28, 26, 20, 37, -19, -20, 3, 2, -61, -25, 43, 59, 17, -13, 7, 17, -53, 10, -9, -28, -15, -66, -8, 0, 15, 13, 92, -29, 
  5, -17, -7, 6, 1, 62, 8, 9, -8, 13, -3, 9, -5, -7, 15, -31, 9, 37, 14, -13, -4, 3, 3, -24, 28, -8, 4, -7, -2, 12, 23, -45, -2, 16, -22, -7, -25, -3, -17, 35, 0, -2, 1, -1, 18, 36, 4, 5, 1, -8, -7, -6, -18, -13, 10, -22, 3, 35, 3, -13, -16, -5, -1, -3, 6, -11, -14, -25, -8, 4, 7, -30, -7, 12, -39, -10, 15, 6, -109, 31, 11, 8, -16, 10, -1, 63, 9, 2, 1, 11, -3, 7, -10, -11, 20, -21, -6, 21, 6, 0, -9, -6, 22, -11, 2, -9, 1, -21, -11, 4, 10, -5, -13, -1, -56, -22, 10, -4, -66, 27, 3, -8, -9, 13, 24, 42, 5, 7, 7, -3, 2, -9, -14, -34, 10, -26, 0, 15, 5, -11, -8, 6, 28, -5, 9, -13, -17, -19, -15, -2, 32, -12, -8, 6, -46, -8, 10, 2, -44, 20, 8, 0, -13, 6, 25, 39, 3, 4, 10, 14, 4, -5, -20, -20, 3, -30, 1, 21, -2, -9, -18, -14, 35, -8, 16, 0, -13, -4, -12, -12, 27, -13, -8, 3, -19, -15, 5, 20, -47, 27, 8, 6, -12, 29, 26, 11, 2, -1, -4, 14, -1, 4, 0, 4, 14, -48, 1, 16, 4, -18, -9, -24, 18, -14, 7, -37, -5, -13, 3, -14, -9, -29, -2, -4, -28, -15, 17, -14, -75, 39, 2, -6, -8, 1, -19, 23, 1, 4, -24, 30, 0, 0, -17, -9, 12, -23, 4, 6, 1, -9, -9, -4, -17, -12, 5, -10, 10, -10, -5, 4, 22, -13, -3, 15, -28, 5, -1, 2, -63, 29, 6, -3, 12, -12, 31, 62, 7, 1, -6, -28, 2, -2, -29, -14, 13, -2, 7, 22, 1, -6, -30, -20, -3, -11, 8, -26, 5, -5, -32, 17, 15, -19, -3, 19, -27, -28, 6, -4, -95, 32, -17, -6, -11, -11, -3, 68, 3, 5, 2, -13, -8, -6, -21, -16, 24, -18, -5, 12, 9, -28, -16, -20, 15, 12, 11, -17, -4, -24, -8, -3, 9, -10, -2, 8, -31, 23, -18, -2, -50, 24, 6, 0, -8, 16, 10, 38, 7, 8, -4, -44, 0, 14, -12, -38, 13, -15, 5, -4, 1, -17, -7, 2, 27, -11, 10, -27, -6, -13, -12, -12, 10, -10, -5, 6, -42, 8, 11, 12, -90, 22, -4, -12, -9, -21, 23, 31, 7, 7, -2, -7, 4, -14, -13, -22, -4, -16, -1, 35, -4, -8, -13, -8, 50, 5, 12, -43, 0, 10, -18, 3, 38, -31, 2, 9, -54, -24, 6, 6, -76, 29, 10, -5, 13, 0, 29, 41, 4, 8, -3, 13, 6, 4, -13, -11, 9, -31, -1, 34, 0, -9, -11, -23, 29, -14, 8, -14, 6, -20, -10, -13, -6, -12, -5, 11, -52, -12, 20, -16, -52, 17, -2, 13, -16, -10, 30, 23, 6, -7, 0, 11, -8, -6, 4, -19, 20, -28, 5, 15, 4, 18, -23, -32, 18, -12, 11, -19, -1, 13, -4, 7, 4, -30, 3, 7, -63, 13, -14, 0, -63, 37, 
  22, -1, 11, 3, -18, 50, 1, -31, 22, 49, 4, 3, -1, 62, -18, 21, 1, -34, -9, -12, -1, -57, 12, -6, -6, -7, 2, -7, -9, 23, 28, 12, 19, 25, 10, -11, -24, -22, 23, -31, 8, -15, 8, -11, -9, 34, -1, -16, -3, 45, 6, -16, -24, 40, -3, 20, 0, -29, -8, 3, -10, -84, 19, -81, -8, -24, -16, -24, -26, 6, 14, 32, 4, 18, 2, -13, -43, -49, 23, -16, -16, -20, 28, 8, 9, 28, 2, -18, -4, 38, -12, 2, -62, 17, 1, 7, 10, -38, -1, -12, -50, -56, -5, -46, 2, -28, 1, 4, -42, -2, 4, 25, 15, 29, -4, 6, -53, -14, -9, -1, 36, -17, 24, 5, 24, -6, -4, -8, 5, -40, -18, 7, -43, 19, -7, 15, -5, 26, -2, -6, -52, -76, -57, -33, 2, -49, -5, -2, -67, 5, 5, 13, 25, -6, -10, -25, -39, -41, -24, 3, 28, 25, 14, -9, -13, -37, 6, 3, -3, -95, -12, -9, -30, -58, 8, 8, 2, -38, 23, -4, -5, -4, -56, 39, 3, 15, -3, -5, -23, -6, -5, -6, 23, -3, -9, -19, -71, -52, -28, -18, -13, -24, 21, -7, -27, -33, 0, -9, -6, 14, 1, 1, -50, -30, 18, 7, 12, -40, -7, 16, -42, -31, 10, 17, 4, 0, -7, 15, -72, 11, 48, 10, 13, 4, 2, -13, -39, -4, 40, 3, -19, -20, 17, -7, 4, -21, 4, -33, 6, 58, -2, -2, -35, 14, -18, 24, 1, 17, -17, -2, -67, -28, 1, -38, 6, 37, -16, 3, -67, 7, 8, 17, 7, 21, 4, -14, 0, -34, 9, 2, -2, 8, 9, -14, 6, -20, 3, -22, -3, 50, 6, 12, 8, 10, -15, 11, 4, -46, 2, -5, 22, -72, -9, -59, 3, -28, -16, 5, 3, 32, -21, 4, 21, 25, 0, 1, 36, -53, 14, -13, -9, -14, 14, -4, 18, -19, 8, -32, -3, 44, 16, -1, -19, 13, -26, -13, 8, -33, 4, 3, -35, -110, -11, -33, 1, -41, -6, 0, -44, 8, 7, 16, 25, 14, -12, -19, 33, -29, 13, -3, 4, 1, 18, -1, 11, -15, 2, -23, 15, 42, 16, -7, -81, 41, -6, 4, -4, 53, -12, 9, -23, -82, 12, -7, 5, -50, -13, 5, -69, 18, 23, 18, 26, 14, -10, 4, -34, -58, -6, 1, 41, 18, 12, 2, -18, -12, 7, -20, 11, -17, -1, 15, -33, 20, 14, 5, -1, -10, 11, 16, -12, -7, -52, -5, 6, 30, -23, -13, 1, 3, 22, 21, 25, 20, -11, -21, -8, -37, -6, -11, -24, -34, 6, -5, -31, -58, 9, -27, 4, 25, -11, 1, -32, 0, 24, 6, 8, -39, -16, 4, -24, 5, -32, 39, 20, 8, -10, -11, -40, 7, 28, 32, 22, -23, 3, -15, -74, -17, 1, -8, -39, -73, 26, 2, 10, -62, 5, -26, 18, 60, 24, 19, 32, -26, 5, 8, 18, -35, 8, 11, -1, -20, -6, 12, -2, 16, 3, 1, 27, -9, 20, 10, 31, -20, 11, 6, 8, 4, 28, -71, 
  -43, -8, 5, -8, 27, -77, -1, 15, 26, -22, 9, -2, 14, -10, -12, 21, -12, -31, -8, 2, 6, 24, -3, -4, -51, 2, -1, 4, 10, -16, -5, 11, -34, -16, -27, 22, 15, 29, -7, 3, -11, -7, -2, 8, -14, -43, 3, 23, 32, -14, -3, -13, 36, -1, -6, 15, 2, -35, 1, 23, 16, 37, -18, -11, -10, 16, 13, 11, 16, -7, 3, -11, -10, -13, -7, 16, -8, 13, 0, 0, -1, 2, -19, -12, -22, -57, 6, 14, 22, -31, 9, 6, 35, -7, -7, 0, 4, -24, 0, 15, 16, 29, -14, 1, -17, 12, 2, 4, 5, 18, 10, -4, -7, -4, 4, 2, 20, 14, 35, -1, -14, 19, 1, -20, -6, -22, 5, 14, 5, -1, 14, 7, 23, 17, 2, 4, -1, -14, -3, 0, 32, 26, -23, 3, -34, 23, -2, -5, 28, -8, -16, -10, -5, -4, -8, 20, 12, 14, -16, 8, -13, -7, -3, 10, -19, -16, -6, 6, 12, -26, 17, -1, 36, 29, 3, 21, -4, 9, -8, -5, 19, 13, -4, -15, -24, 1, 8, -17, 13, 16, 10, 1, -28, 6, -11, 4, 11, 15, -6, -1, -4, -10, 3, -14, -16, 7, -4, 7, 21, -40, -2, 10, 37, 4, -20, 25, -9, 5, 6, -24, 15, 18, -17, 1, -31, 21, 12, -18, 10, -7, 17, -12, -8, -2, -22, 22, 7, 11, -38, 1, -46, 4, 9, -1, 10, 9, -5, 5, 33, -29, 9, -12, 32, 2, -22, 16, -1, -4, 0, -4, 22, 9, -3, -8, -23, -4, 12, -3, 23, -11, -2, -24, -4, -13, -19, -34, 5, 19, -7, -2, -13, 3, 20, -11, -41, -23, -5, 7, 25, 11, 8, 8, 25, -13, -2, 11, -8, -1, 4, -6, 13, 22, -11, 0, -20, 8, 19, -9, 25, -8, -3, 17, -2, -13, -4, 8, -1, 18, 19, -2, 8, 8, -6, 9, -5, -59, -2, 14, 21, -22, -2, -6, 38, -6, 0, 28, -4, 4, 8, 12, 30, 49, 6, -8, -9, 20, 13, 10, 13, 16, 4, -15, -20, -3, -26, -32, -9, 15, -26, -4, -10, -7, 10, -11, -7, -16, -1, 19, 12, 5, 6, -15, 33, -2, -12, -28, 3, -8, 0, 12, 22, 18, -24, 2, -22, 22, 19, -14, 36, -15, 16, -16, -14, -2, 7, -10, 15, 30, 23, 9, -10, 2, 11, 15, -19, -7, -12, 11, 22, -8, 25, -11, 28, 7, 2, -8, -2, -20, 6, 7, 29, -1, -17, -30, -39, 6, 8, -5, 12, -14, -4, -26, -12, -2, 10, 20, 4, 11, -6, 7, -9, -4, -4, -17, -18, -18, -3, 12, 22, -50, 10, -12, 34, 7, -20, 19, -11, -7, 6, -6, 15, 19, 0, -25, -35, 3, 7, -3, 26, -1, 12, -34, -25, 19, -9, 9, -2, 7, -29, 4, -30, -17, -6, 6, -45, 16, 4, 24, 1, -42, -2, -5, -41, 24, -22, 21, -13, 6, -18, -5, 3, 28, 10, 6, -30, 14, 5, -9, -63, 10, 1, 12, -25, 5, 13, -5, -14, -2, -27, 0, 
  13, 11, -9, -3, 21, -104, 11, -19, -17, -77, 9, -16, 3, -15, -28, -30, 2, 24, -34, -16, 0, 13, -40, 22, -11, 35, -21, -8, -16, -6, -30, 38, 20, 8, 38, 7, 12, -25, 13, -41, 27, 33, 9, -7, 35, -42, 11, -29, -7, -28, 17, -22, 10, 9, -27, -3, -2, -3, -21, -11, -8, -6, -24, 52, -29, 61, -12, -26, -33, -11, -3, 36, -5, 10, 22, 1, -78, -8, 18, -46, 6, 24, 20, -12, 52, -41, 13, -29, -15, -2, 16, -12, 19, 40, -15, 20, -11, -14, -25, -1, 14, -12, -10, -3, -25, 22, -16, -1, 22, -12, 1, 20, 9, -12, 14, -11, -50, -2, 1, -11, -27, -17, 16, -20, 1, -15, 17, -31, 14, 7, -4, -2, -2, 18, -7, -28, -2, -46, -14, -25, -20, 28, -19, -21, -16, 26, 18, -2, -25, 1, -17, 30, -2, 20, 29, 9, -33, 11, 62, -27, -55, -15, 16, -10, 39, -18, 16, -49, -6, 12, -8, 13, 29, -12, -16, -26, -12, -46, -28, 13, 9, 3, -42, -36, -16, -4, 5, -6, 18, 11, -25, 30, 5, 16, 16, -3, -18, -16, 26, -25, -22, 9, 24, -16, 32, -2, 9, -15, 5, 6, 3, 8, -4, -16, 27, -28, -5, -30, -33, 6, 7, 7, -39, -33, -1, 75, 17, -3, 1, 29, -43, 21, -5, 27, 19, 8, -21, -6, 52, -46, 57, -2, 6, 7, 36, -60, 4, -3, 10, -30, 1, -5, 17, 21, 17, -92, -5, 6, -29, 14, -4, 9, -31, -28, -14, 33, -6, -14, 11, 18, -39, 28, 4, 21, 18, 9, -6, -10, 55, -47, 34, -15, -3, 21, 38, -69, 3, -7, 5, -31, -3, -3, 25, 35, -17, -62, 2, -41, -34, 2, -1, 19, -33, 8, -19, 34, -7, -8, 23, 2, -31, 3, 5, 1, 26, 1, -88, -8, 20, -20, 16, -4, 12, 14, 18, -24, 5, -41, 4, -2, 4, 9, 18, 16, -11, -30, 0, -56, -40, -9, 7, 15, -66, -14, -19, 43, 3, 14, -17, -3, -24, 17, -9, 12, 30, 6, -58, -13, 16, -27, 21, 14, 9, 3, 21, -39, 6, -42, 11, 31, 13, -1, 33, 15, -10, -7, -8, -84, -26, -11, 15, -2, -60, -1, -12, 53, -6, -21, 33, 3, -20, 41, -16, 15, 33, -8, -45, -10, 35, -23, -8, 36, 8, -6, 35, -35, 13, -66, 0, 28, 5, -3, 19, 9, -9, -28, -15, -58, -35, -23, 12, 6, -49, 10, -12, 26, -10, -16, -5, 5, -39, 39, -18, 5, 32, -13, -65, -14, 23, -34, 25, 24, 7, -10, 28, -30, 9, -42, 13, -11, 13, 5, -10, 13, 30, -34, -11, -31, -21, -1, 6, 10, -34, -6, -13, 38, -9, 1, -12, 20, -8, 35, -8, 3, 15, 2, -7, 6, 47, -31, 83, 4, 26, -14, 11, -27, 7, -62, 3, -24, 17, -14, 49, 5, 33, -30, -6, -23, -15, -9, 69, 30, -64, -15, -25, 22, -33, -22, 54, 13, -32, 35, -6, 24, 14, -1, 22, -19, 19, 6, 
  -18, -40, 29, 0, -50, -13, 11, -3, -69, 1, -24, -3, 2, -41, 12, -49, 16, -25, 3, -5, -4, -3, 6, 1, 27, -21, -3, -10, 7, 5, -78, 7, -2, 12, -24, -20, 3, 12, 10, -46, -40, -116, 2, -1, -53, -47, 6, -7, -65, 32, -15, 18, -2, -53, -5, -48, 20, 21, 0, -11, 3, -5, -12, 55, 11, -3, 0, 12, -18, 4, -31, 12, 2, 12, -7, -4, 10, 12, 47, -29, -16, -107, -23, -1, -46, -127, -10, -5, -28, 15, -5, -6, 3, -11, -3, -37, 5, 32, 10, -3, -4, -43, -36, 80, 1, -5, -13, -5, 3, 0, -71, 7, -2, -14, 29, -25, 1, -1, 18, -26, -13, -78, -39, -3, -119, -76, -7, -11, -55, 41, -1, -7, 3, -78, 6, -6, 9, -24, 9, -1, -9, -19, -10, 25, 22, 19, -3, 8, -17, 25, -53, 1, 3, -12, 25, -1, -54, 19, 29, -17, -11, -69, -30, -3, -29, -18, -9, -1, -56, 56, 0, -3, -1, -1, 0, 21, 17, -6, 12, -8, -3, 19, -1, 7, 23, -2, -4, -6, -6, -2, -28, 4, 2, -20, 15, 15, -35, 19, 33, -20, 5, -75, -22, -3, -85, -30, 2, 10, -68, 65, 9, -12, -9, -6, -22, 2, 16, -3, 9, -2, 33, 43, -15, -39, 19, -34, -18, 0, 17, -7, -50, 11, -4, -1, 20, -25, -16, -7, 6, -15, -1, -71, -12, -7, -69, -100, 4, 8, -24, 19, -2, -7, -7, -37, 4, -39, -4, -83, 12, 0, 13, 1, 37, -15, 15, -54, -6, -4, -13, -16, -13, 10, -4, -33, 2, 5, -23, 6, 3, 2, -13, -76, -3, 0, -70, -34, 7, 2, -55, 71, 13, -22, 7, 31, -6, -26, 7, 9, 10, -14, 24, 2, 27, 9, 12, 47, -4, -4, 11, -16, 46, 15, -15, -10, 0, 10, -23, 7, 45, -22, 18, -60, -15, -17, -34, -70, -9, 0, -30, 7, 6, -20, -10, -30, -7, -54, 5, 22, 6, -18, -4, -46, -50, -43, 10, 29, 5, -18, -5, -17, -36, 4, -8, 5, 12, -9, 12, 5, 36, 15, -6, -30, -7, -7, -61, -20, -1, -13, -95, 77, -17, -29, 6, 26, 15, 67, 9, 22, 7, -12, -4, -9, -7, -21, 7, 29, 1, -8, -65, 25, -52, -12, -15, 0, 2, -27, -66, -16, 24, -13, -18, -54, -44, -4, -40, -17, -5, -6, -68, 41, -28, -18, 1, -20, 13, 27, 10, -4, 5, -10, -45, 1, -10, 76, 16, 5, 19, -17, -38, 24, -102, 2, -4, -24, 12, -5, -20, -2, 33, -14, -17, -38, -2, -9, -10, -6, 4, 8, -77, 51, -20, -15, 31, -26, -14, -7, 19, 16, 6, -6, 0, 23, -54, -8, 9, -63, 7, -13, -4, -4, -75, 12, 10, -12, 15, -26, -17, 3, 9, 2, -30, -8, -27, -14, -48, -24, -9, 29, -57, 25, -22, -15, -47, -21, -50, -17, 7, 22, 17, -14, 22, 5, -29, -21, 21, -53, 0, -16, 43, -24, -17, 6, 4, -4, 17, -23, -62, 8, 16, -10, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 6,520 } };
const TfArray<1, float> quant4_scale = { 1, { 0.014067435637116432, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[8] = { -581, 434, -1253, -467, -1759, 1978, -259, -1209, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 0.00014344236114993691, 0.00014457693032454699, 9.3902941443957388e-05, 9.9365446658339351e-05, 0.00015500573499593884, 0.00015057642303872854, 0.00012153440184192732, 0.00015546286886092275, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*3*3*8] = { 
  /* [0][0][][] */ 63,14,37,-3,22,9,-25,32, -16,1,26,-48,-39,-14,-75,-27, 26,40,-15,-96,-9,22,40,0, 
  /* [0][1][][] */ 41,-18,10,32,-28,-18,-20,28, -6,-16,-17,-30,-14,-66,-61,-11, -8,7,-11,-39,2,33,38,-3, 
  /* [0][2][][] */ 25,-16,-12,-81,-18,-75,-18,15, -16,-12,2,-127,9,-76,-95,-11, -11,40,-43,-93,17,32,57,7, 
  /* [1][0][][] */ -8,-32,-87,24,-52,26,32,-72, -25,-36,-44,14,23,51,44,-28, 66,-10,-27,80,47,-82,-43,-18, 
  /* [1][1][][] */ 22,-2,-76,-91,-20,10,-7,-68, -39,11,-43,-25,-15,49,53,-40, 57,-106,-80,73,72,-82,-28,-30, 
  /* [1][2][][] */ -33,-17,-75,-99,-50,-2,-16,-96, -64,0,-97,20,-13,53,26,-127, -22,-62,-44,85,20,-69,-22,-28, 
  /* [2][0][][] */ -46,-1,55,-3,27,-119,40,-13, 86,-77,24,50,-127,35,-17,4, -40,40,6,127,4,4,-56,-22, 
  /* [2][1][][] */ 6,71,31,-74,32,-124,37,-39, 88,-10,23,-29,-124,99,-70,38, -27,1,-22,85,33,14,-24,27, 
  /* [2][2][][] */ -59,32,-30,-4,31,-120,79,-43, 57,-57,-34,49,-92,104,-32,-14, -45,9,-25,13,29,28,-14,-21, 
  /* [3][0][][] */ -2,-13,27,82,-22,-25,-95,39, 24,-36,75,127,29,-49,12,-5, 16,-22,13,9,-68,-104,-80,-9, 
  /* [3][1][][] */ -17,-28,17,-16,11,-29,-51,-56, -36,26,-23,-2,-39,24,-44,-66, -60,-8,18,35,-40,-78,-102,-49, 
  /* [3][2][][] */ -34,-60,-42,-25,11,4,-6,13, -34,-59,-42,-14,-10,-9,52,-7, -50,-10,-62,1,-53,-42,-62,-73, 
  /* [4][0][][] */ -42,-30,-82,91,23,58,12,-70, -62,6,-45,78,51,19,32,-21, -56,-20,-44,58,54,79,-1,-30, 
  /* [4][1][][] */ 26,-77,-15,25,-88,-3,-73,7, -14,-13,27,-21,-14,-4,-43,4, -5,-18,-17,-73,-18,30,-79,-6, 
  /* [4][2][][] */ 50,-11,40,23,-89,-72,-56,37, 42,8,69,-8,9,-127,-53,47, 24,-13,3,-2,-53,-63,-100,40, 
  /* [5][0][][] */ 17,-23,-45,-30,33,-49,12,45, -19,83,-52,40,-50,-9,4,-39, 52,99,-54,24,-19,67,-7,-83, 
  /* [5][1][][] */ 30,22,-42,-3,17,-6,41,33, -42,74,-79,-32,-46,-43,-5,-52, -19,58,10,-28,2,-12,5,-75, 
  /* [5][2][][] */ 24,-33,-27,-74,18,-25,46,7, -74,70,-93,-117,-4,-13,-33,-76, 32,67,-18,-127,25,-6,6,-38, 
  /* [6][0][][] */ 59,27,-53,48,-35,-51,11,-70, -39,37,-5,33,11,-88,52,-20, 67,3,-15,127,57,86,-15,13, 
  /* [6][1][][] */ 11,45,-71,-26,-9,-77,14,-116, -6,10,1,-11,54,-65,1,-17, 39,28,19,65,54,96,-69,-12, 
  /* [6][2][][] */ -26,55,-100,-60,13,-53,-8,-92, -35,-4,2,-54,10,-78,-32,-12, 53,24,44,49,14,97,-44,41, 
  /* [7][0][][] */ 13,-63,-11,-51,-76,65,-85,31, -45,56,-79,-8,19,18,10,-74, -36,-13,17,-15,13,46,45,24, 
  /* [7][1][][] */ 27,-42,19,22,-75,45,-85,5, -9,12,-11,-1,28,48,-27,-58, 6,23,28,-1,32,40,38,8, 
  /* [7][2][][] */ 17,-101,9,36,-60,40,-45,19, -13,-11,-66,-87,-8,-4,-39,-85, -4,6,-2,-127,46,51,27,38, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,3,3,8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0071935257874429226, 0.0072504235431551933, 0.004709161352366209, 0.0049831019714474678, 0.0077734203077852726, 0.007551293820142746, 0.0060948580503463745, 0.0077963452786207199, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 705, -1964, -6518, -208, 8748, 6680, 8010, -1454, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 3.6324192478787154e-05, 4.0326172893401235e-05, 4.4157844968140125e-05, 4.5455530198523775e-05, 3.0796258215559646e-05, 3.7060272006783634e-05, 3.3296484616585076e-05, 3.9736343751428649e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[8*3*3*8] = { 
  /* [0][0][][] */ 54,-96,-6,14,53,41,-83,7, -22,-104,20,44,23,-20,9,45, 0,-47,0,-26,-11,-23,-88,-20, 
  /* [0][1][][] */ -6,-82,8,19,34,-86,-64,14, 55,-90,48,22,-9,-27,2,-10, -40,-68,-4,102,3,-31,-127,-35, 
  /* [0][2][][] */ 31,-73,2,13,32,109,-59,-11, 29,-89,-31,-16,31,15,6,1, -46,-78,-34,13,-26,22,-47,-16, 
  /* [1][0][][] */ 39,-69,36,57,49,20,46,15, -68,-34,-88,-6,-86,-15,-89,-19, 14,-33,42,-10,1,60,38,18, 
  /* [1][1][][] */ 48,-89,35,2,31,-15,46,2, -61,-42,-88,-66,-86,-48,-92,-20, -11,-37,8,-19,-5,56,72,53, 
  /* [1][2][][] */ 31,-99,17,-4,44,-14,83,-23, -103,-19,-86,-78,-64,-97,-81,-68, -15,0,74,-28,9,127,46,39, 
  /* [2][0][][] */ 14,16,38,113,14,29,-5,36, 93,-41,-8,63,28,-7,-52,11, 23,-61,2,64,-7,16,-127,12, 
  /* [2][1][][] */ 3,19,-1,42,-3,56,45,33, -9,-14,35,22,22,39,11,79, 2,-17,-14,112,62,69,-42,35, 
  /* [2][2][][] */ 10,-12,17,16,-8,39,34,17, 10,-47,24,16,28,11,53,-6, -25,-79,30,-23,-10,17,-22,-8, 
  /* [3][0][][] */ 40,-20,66,16,68,66,29,70, 2,24,75,22,21,58,12,23, 69,32,60,-88,61,95,124,21, 
  /* [3][1][][] */ -24,-49,-13,-123,-24,-2,23,-35, -69,-16,-8,57,-44,-26,-37,-50, -26,-62,-28,-66,-13,-43,40,-53, 
  /* [3][2][][] */ -52,-44,-32,-48,-49,-17,-37,-98, -113,-43,-87,58,-124,-79,-127,-118, -112,-65,-117,-65,-118,-83,-33,-121, 
  /* [4][0][][] */ -85,-16,-118,-19,-91,-123,17,-76, -3,10,31,11,-14,102,-23,20, 38,32,35,2,55,-18,34,-11, 
  /* [4][1][][] */ -83,-30,-119,-35,-98,-93,-11,-75, -14,121,35,21,-16,31,-85,29, 38,-19,46,7,29,29,127,36, 
  /* [4][2][][] */ -62,-2,-102,-36,-84,-108,37,-62, -11,91,19,29,-11,51,-90,24, 39,44,91,7,63,39,82,10, 
  /* [5][0][][] */ -19,-40,14,-5,-25,96,-10,13, -34,-52,-73,63,-21,-108,47,-92, -76,112,-77,95,-78,-108,-98,-78, 
  /* [5][1][][] */ -9,-52,19,-69,-20,32,0,31, -113,-60,-94,107,-37,-97,45,-98, -98,39,-104,92,-91,-96,-13,-99, 
  /* [5][2][][] */ -21,-38,76,-63,-3,41,-2,37, -95,-55,-111,-26,-127,-72,-62,-91, -106,-21,-101,90,-112,-79,-121,-99, 
  /* [6][0][][] */ -104,32,-99,-115,-95,-8,-56,-94, -91,-41,-73,-57,-96,-49,-30,-55, 21,-6,11,111,45,99,-13,68, 
  /* [6][1][][] */ -101,60,-125,-106,-112,-27,-90,-60, -104,100,-127,-36,-106,-31,-59,12, -23,18,51,76,45,83,-35,63, 
  /* [6][2][][] */ -92,34,-78,-57,-78,-59,-120,-19, -93,23,-105,-21,-99,-29,-115,-18, 51,29,28,55,6,74,-14,71, 
  /* [7][0][][] */ 10,13,-26,28,14,-22,-84,-15, 8,22,79,-46,44,-16,-20,36, 26,-12,127,74,57,23,-42,26, 
  /* [7][1][][] */ 21,-18,-2,16,15,44,-63,28, 10,11,20,-80,-14,-8,27,9, 62,-28,21,83,50,10,1,22, 
  /* [7][2][][] */ -26,-9,-22,-28,4,22,-33,30, 48,-25,2,-47,45,-3,120,6, 13,-52,28,-14,9,17,22,14, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0059567196294665337, 0.0066129951737821102, 0.0072413422167301178, 0.0074541466310620308, 0.0050502065569162369, 0.0060774274170398712, 0.0054602129384875298, 0.0065162703394889832, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[8] = { -350, 209, -148, -17229, -335, -757, -260, -353, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 1.8451541109243408e-05, 2.8919705073349178e-05, 2.4035740352701396e-05, 2.4939045033534057e-05, 1.9021717889700085e-05, 2.0091445549041964e-05, 2.3610295102116652e-05, 2.4549499357817695e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[8*3*3*1] = { 
  /* [0][0][][] */ -4, 79, -56, 
  /* [0][1][][] */ 124, -117, 28, 
  /* [0][2][][] */ 127, -27, -76, 
  /* [1][0][][] */ -127, -65, 2, 
  /* [1][1][][] */ -26, 8, 92, 
  /* [1][2][][] */ -31, 54, 49, 
  /* [2][0][][] */ 21, 125, -127, 
  /* [2][1][][] */ 33, -3, -23, 
  /* [2][2][][] */ 20, 87, -92, 
  /* [3][0][][] */ 5, 72, -12, 
  /* [3][1][][] */ -28, 127, -44, 
  /* [3][2][][] */ 47, 16, 34, 
  /* [4][0][][] */ 94, -39, -27, 
  /* [4][1][][] */ 117, -127, 28, 
  /* [4][2][][] */ -22, 112, -68, 
  /* [5][0][][] */ -45, 109, -35, 
  /* [5][1][][] */ -20, 127, -64, 
  /* [5][2][][] */ -61, 91, -102, 
  /* [6][0][][] */ 117, -45, 8, 
  /* [6][1][][] */ 73, -94, -14, 
  /* [6][2][][] */ 74, -127, -95, 
  /* [7][0][][] */ 8, -9, 20, 
  /* [7][1][][] */ -23, 94, -41, 
  /* [7][2][][] */ -26, 127, -73, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant10_scale = { 8, { 0.0047421911731362343, 0.0074325921013951302, 0.0061773746274411678, 0.0064095309935510159, 0.0048887310549616814, 0.0051636598072946072, 0.006068031769245863, 0.0063094147481024265, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,99,40,1 } };
const TfArray<1, float> quant11_scale = { 1, { 0.003890931373462081, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,99,40,8 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0060980194248259068, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,50,20,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0060980194248259068, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,20,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.019940480589866638, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,10,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.019940480589866638, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,25,10,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.026661232113838196, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,13,5,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.026661232113838196, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,520 } };
const TfArray<1, float> quant18_scale = { 1, { 0.026661232113838196, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,6 } };
const TfArray<1, float> quant19_scale = { 1, { 0.32070240378379822, } };
const TfArray<1, int> quant19_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,6 } };
const TfArray<1, float> quant20_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 11,10,9 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 12 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 13,8,7 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,6,5 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 16 } };
const TfArray<1, int> outputs6 = { 1, { 17 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 17,2 } };
const TfArray<1, int> outputs7 = { 1, { 18 } };
const TfLiteFullyConnectedParams opdata8 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs8 = { 3, { 18,4,3 } };
const TfArray<1, int> outputs8 = { 1, { 19 } };
const TfLiteSoftmaxParams opdata9 = { 1 };
const TfArray<1, int> inputs9 = { 1, { 19 } };
const TfArray<1, int> outputs9 = { 1, { 20 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 3120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension11, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 31680, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension13, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8000), (TfLiteIntArray*)&g0::tensor_dimension15, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2000), (TfLiteIntArray*)&g0::tensor_dimension17, 520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 528), (TfLiteIntArray*)&g0::tensor_dimension19, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[10] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[10] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 21, };
const size_t tflNodes_subgraph_index[] = {0, 10, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  20, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 21;
  for (size_t i = 0; i < 21; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 10; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
